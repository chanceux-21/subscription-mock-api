version: '3.8'

services:
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - network.host=0.0.0.0
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 30

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - elastic

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    ports:
      - "9092:9092"
    networks:
      - elastic

  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "5000:5000"
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - KAFKA_BROKER=kafka:9092
      - NODE_ENV=production
    volumes:
      - ./db:/app/db  # Для сохранения данных SQLite
      - ./logs:/app/logs  # Для логов приложения
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - elastic
    restart: unless-stopped

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - elastic
    restart: unless-stopped

volumes:
  es-data:

networks:
  elastic:
    driver: bridge